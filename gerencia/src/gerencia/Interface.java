/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gerencia;

import java.util.ArrayList;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author fernandes
 */
public class Interface extends javax.swing.JFrame {
        int i, atual = 0, clock;
        int itlb, atualtlb = 0;
        Random random = new Random(); // depois fazer ler de um arquivo
        static ArrayList<Processo> processos = new ArrayList();
        static ArrayList<Pagina> seqPaginas = new ArrayList();
        static Swap memSwap = new Swap();
        
        static Processo p = null;
        static Quadro q = null;
        static PageTable pt = new PageTable(32, 32);
        static ArrayList<Integer> finalizados = new ArrayList();
        static Tlb tlb = new Tlb(10);
    /**
     * Creates new form Interface
     */
    public Interface() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabela_processos = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        pageTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabelaTlb = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        memoria = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        missHit = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        swap = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Processos");

        tabela_processos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "PID", "ÍNDICE", "TAMANHO"
            }
        ));
        jScrollPane3.setViewportView(tabela_processos);
        if (tabela_processos.getColumnModel().getColumnCount() > 0) {
            tabela_processos.getColumnModel().getColumn(0).setHeaderValue("PID");
            tabela_processos.getColumnModel().getColumn(1).setHeaderValue("ÍNDICE");
            tabela_processos.getColumnModel().getColumn(2).setHeaderValue("TAMANHO");
        }

        jLabel2.setText("Tabela de Páginas");

        jLabel3.setText("TLB");

        pageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", ""},
                {"", ""},
                {"", ""},
                {"", ""},
                {"", ""},
                {"", ""},
                {"", ""},
                {"", ""},
                {"", ""},
                {"", ""},
                {"", ""},
                {"", ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""}
            },
            new String [] {
                "Página", "Quadro"
            }
        ));
        jScrollPane5.setViewportView(pageTable);

        tabelaTlb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Página", "Quadro"
            }
        ));
        jScrollPane6.setViewportView(tabelaTlb);

        memoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {""},
                {""},
                {""},
                {""},
                {""},
                {""},
                {""},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Posições de memória"
            }
        ));
        jScrollPane1.setViewportView(memoria);

        jButton1.setText("PROCESSAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Memória Física");

        missHit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "TLB MISS", "TLB HIT"
            }
        ));
        jScrollPane2.setViewportView(missHit);

        swap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Páginas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(swap);

        jLabel5.setText("Memória Swap");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jLabel3))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jButton1)))))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel2)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel5)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        executar();
        jButton1.setText("Processar");
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void executar()
    {
        DefaultTableModel table = (DefaultTableModel) pageTable.getModel();
        DefaultTableModel memoriaFis = (DefaultTableModel) memoria.getModel();
        DefaultTableModel tabelaProc = (DefaultTableModel) tabela_processos.getModel();
        DefaultTableModel tabelaSwap = (DefaultTableModel) swap.getModel();
        DefaultTableModel tabTlb = (DefaultTableModel) tabelaTlb.getModel();
        DefaultTableModel tabMissHit = (DefaultTableModel) missHit.getModel();
        
        //Testa se todos processos foram finalizados
        if(finalizados.size() == processos.size())
        {
            for(int j = 0; j < processos.size(); j++)
            {
                tabelaProc.setValueAt(null, j, 0);
                tabelaProc.setValueAt(null, j, 1);
                tabelaProc.setValueAt(null, j, 2);
            }
            
            tlb.clear();
            tabMissHit.setValueAt(null, 0, 0);
            tabMissHit.setValueAt(null, 0, 1);       
            
            int resposta = JOptionPane.showConfirmDialog (null, "Deseja gerar novos processos?","Iniciar", JOptionPane.YES_NO_OPTION);
            if(resposta == JOptionPane.YES_OPTION)
            {
                limpa();
                System.out.flush();
                geraProcessos(Integer.parseInt(JOptionPane.showInputDialog(null, "Digite a quantidade de processos:")));
                return;
            }else
            {
                System.out.println("ACABOU TUDO\n");
                System.exit(0);
                return;
            }
        }
        //Seleciona randomicamente um processo para ser executado
        int aux = random.nextInt(processos.size());
        
        //Testa se o processo selecionado já terminou
        if(!finalizados.isEmpty())
        {
            for(int j = 0; j < finalizados.size(); j++)
            {
                int cont;
                if(aux == finalizados.get(j))
                {
                    jButton1.doClick();
                    return;
                }
            }
        }
        
        //Gera um 'quantum' aleatório para o processo executar
        int aux2 = random.nextInt(processos.get(aux).getDuracao() - processos.get(aux).getIndice());
        aux2 = aux2 + processos.get(aux).getIndice();
        
        //Evita que o 'quantum' seja zero
        if(processos.get(aux).getIndice() == aux2)
        {
            aux2+=1;
        }
        
        System.out.println("\nPROCESSO SELECIONADO = " + aux);
        //Executa o processo
        for(int j = processos.get(aux).getIndice(); j < aux2; j++)
        {
            //Controla a linha a ser inserida
            if(atual >= 31)
                atual = 0;
            i = atual;
           
            //verifica se a página encontra-se na tlb e conta o MISS e HIT
            if(tlb.verifica(processos.get(aux).getPaginas()[j]))
                tlb.increasingHit();
            else
                tlb.increasingMiss();
            
           //Testa se o página não foi inserida. Se não for inserida, insere na página
           if(pt.put(processos.get(aux).getPaginas()[j]) == false /*&& (memSwap.getPg(processos.get(aux).getPaginas()[j]) == null)*/ && (processos.get(aux).getIndice() != processos.get(aux).getDuracao()-1))
           {
                if(!tlb.tlbCheia()){
                    tlb.putTlb(processos.get(aux).getPaginas()[j], pt.getQdPg(processos.get(aux).getPaginas()[j]));     
                }  
                //Faz o teste pra ver se a página está na swap
                if(memSwap.getPg(processos.get(aux).getPaginas()[j]) != null)
                    memSwap.removePg(processos.get(aux).getPaginas()[j], tabelaSwap);
                //Após adicionar a pagetable, atualiza a tabela    
                itlb++;
                processos.get(aux).incrementaIndice();
                i++;
                clock++;
               //Testa se a page table está cheia
                if(pt.estaCheia() == true)
                {
                    i = atual;
                      //Se a página atual a ser removida está no limite, retorna ao início
                        if(atual >= 31)
                           atual = 0;
                        //Adiciona as páginas que serão retiradas a swap
                        memSwap.addPg(pt.getPg(atual));
                        tabelaSwap.addRow(new Object[]{pt.getPg(atual)});
                        //remove a página da tlb que foi para a swap
                        tlb.liberaTlbSwap(pt.getPg(atual));
                        //Remove página mais antiga
                        pt.removePg(atual);
                        atual++;                   
                }
                System.out.println("Quantum = "+aux2+ "\tClock = " + clock +"\tTempo de execuão do processo = " + j +"\tProcesso = " + processos.get(aux).getIdProcesso() + "\tPágina = " + processos.get(aux).getPaginas()[j].getIdPagina());
            }
            //Se a pagina já foi inserida e não está na swap, apenas incrementa o clock
            else
            {
                clock++;
                processos.get(aux).incrementaIndice();
                //Se a página foi usada meis de uma vez coloca ela na tlb
                if(!tlb.verifica(processos.get(aux).getPaginas()[j]))
                {
                    if(atualtlb > 9)
                        atualtlb = 0;
                    //libera uma espaço na tlb
                    tlb.liberaTlb(atualtlb);
                    //adiciona a página na tlb
                    tlb.putTlb(processos.get(aux).getPaginas()[j], pt.getQdPg(processos.get(aux).getPaginas()[j]));
                    atualtlb++;
                }
                                                
                System.out.println("Quantum = "+aux2+ "\tClock = " + clock +"\tTempo de execuão do processo = " + j +"\tProcesso = " + processos.get(aux).getIdProcesso() + "\tPágina = " + processos.get(aux).getPaginas()[j].getIdPagina() + " já foi inserida");
            }   
        }
        //Atualiza PID, índice e tamanho dos processos
        for(int j = 0; j < processos.size(); j++)
        {
            tabelaProc.setValueAt(processos.get(j).getIdProcesso(), j, 0);
            tabelaProc.setValueAt(processos.get(j).getIndice(), j, 1);
            tabelaProc.setValueAt(processos.get(j).getPaginas().length, j, 2);
        }
        
        //Testa se o processo já acaboou
        if(processos.get(aux).getIndice() >= processos.get(aux).getDuracao())
        {
            System.out.println("Processo " + processos.get(aux).getIdProcesso() + " acabou");
            processos.get(aux).setAcabou(true);
            finalizados.add(processos.get(aux).getIdProcesso());
            if(processos.get(aux).getIndice() == processos.get(aux).getPaginas().length)
            {
                for(int l = 0; l < processos.get(aux).getPaginas().length; l++)
                {
                    tlb.liberaTlb(processos.get(aux).getPaginas()[l]);
                    pt.liberaProc(processos.get(aux).getPaginas()[l]);
                    memSwap.removePg(processos.get(aux).getPaginas()[l], tabelaSwap);
                }
            }
            
            if(atualtlb >= 9)
                atualtlb = 0;
            
            if(i >= 31)
                    i = 0;
            atualiza(table, memoriaFis, tabTlb, tabMissHit);
                clock++;
            pt.printTable();
            return;
        }
        atualiza(table, memoriaFis, tabTlb, tabMissHit);
        pt.printTable();
    }
     
    //Método para atualizar a pagetable
    public void atualiza(DefaultTableModel table, DefaultTableModel memoriaFis, DefaultTableModel tabTlb, DefaultTableModel tabMissHit)
    {
      
        //atualiza a tabela de miss e hit
        tabMissHit.setValueAt(tlb.getMiss(), 0, 0);
        tabMissHit.setValueAt(tlb.getHit(), 0, 1);
        
        //atualiza a page table e a memória física
        for(int i = 0; i < pt.getPgTam(); i++)
        {
            int aux;
            table.setValueAt(pt.getPg(i), i, 0);
            table.setValueAt(pt.getQd(i), i, 1);
            memoriaFis.setValueAt(pt.getQd(i), i, 0);
            if(pt.getPg(i) == -1)
            {
                table.setValueAt(null, i, 0);
                table.setValueAt(null, i, 1);
                memoriaFis.setValueAt(null, i, 0);
            }
        }
        
        //atualiza a tlb
        for(int i = 0; i < tlb.getPgTam(); i++){
            
            int aux;
            
            tabTlb.setValueAt(tlb.getPg(i), i, 0);
            tabTlb.setValueAt(tlb.getQd(i), i, 1);
            if(tlb.getPg(i) == -1){
                tabTlb.setValueAt(null, i, 0);
                tabTlb.setValueAt(null, i, 1);
            }
        }
        
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Interface().setVisible(true);
            
        });
    }
    
    //Método para gerar processos de acordo com a vontade do usuário
    //Obs: o máximo é 100, pois ainda não sabemos como adicionar mais de 100 linhas em uma jTable
    public static void geraProcessos(int valor)
    {
        for(int i = 0; i < valor; i++){
            try{    
                p = new Processo(i);          
                processos.add(p);
                System.out.println(p.toString());
            
            }catch(IllegalArgumentException e){
                System.out.println(e.getMessage());
            }
        }
    }
    
    //Limpa informações para reexecutar com novos processos
    public void limpa()
    {
        i = 0;
        atual = 0; 
        clock = 0;
        processos.clear();
        seqPaginas.clear();
        memSwap.limpa();
        finalizados.clear();
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable memoria;
    private javax.swing.JTable missHit;
    private javax.swing.JTable pageTable;
    private javax.swing.JTable swap;
    private javax.swing.JTable tabelaTlb;
    private javax.swing.JTable tabela_processos;
    // End of variables declaration//GEN-END:variables
}
